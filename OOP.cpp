#include <iostream>
#include "my_vec.h"
int main()
{
    //Объектно ориентированный подход -- программа стоит из взаимодействующих сущностей - объектов
    //Все объекты принадлежат к какому-то классу. Объекты одного класса устроены одинаково 
    //Объекты чем-то напоминают структуры -- они также хранят набор данных, состоящий из стандартных типов/других объектов
    //Отличие заключается в том, что объекты как правило не предоставлют доступ к хранимым данным напрямую(к в С-style структах),
    //Но предоставляют доступ к ним через интерфес: функции, которые имеют доступ к этим данным
    //Такие функции называются методами. Подобная регламентация доступа является реализацией прицнипа инскапсуляции
    //Подобный подход позволяет нам не заботиться о том, как объекты реализованны внутри
    //Все, что нам нужно знать, какой интерфейс он предоставляет

    // Объектно ориентрированный подход хорошо себе зарекомендовал как в работе с объектами из реальной жизни
    // (Такой пример мы рассмотрим на следующей паре)
    //В нашем курсе (да и в реальной работе физика) нам нечасто приходится создовать классы,
    //соответсвующие предметам реальной жизни
    //однако часто приходится работать с математическими абстракциями - системами уравнений, векторными полями и т.д.
    //Давайте в качестве примера реализуем класс вектор, который реализует структуру данных вектор
    //ДИСКЛЕЙМЕР: пока не реализует в полной мере -- у вектора памяти больше, чем требуется для хранения данных
    //Создаем векторы заполнением
    vector arr(1, 3);
    vector arr2(2,4);

    //Создаем вектор с помощью копирования
    vector arr3(arr);
    //Проверяем на равенство
    bool is_arr3_eq_arr = (arr == arr3);

    //Операция + здесь определена как конкатенация
    vector vec_new = arr + arr2;

    //Выводим получившийся вектор
    std::cout << vec_new << std::endl;

    vector to_move(std::move(vec_new));

    //Заметим, что мы так реализовали интерфейс класса,
    //что работа с ним мало чем отличается от работы с встроенными типами!
    return 0;
}